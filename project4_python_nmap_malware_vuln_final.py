# Import required libraries
from pyfiglet import Figlet
from termcolor import colored
import random
import nmap
import ipaddress
import socket
import sys
import os

def print_rainbow(text):
    """Print text in rainbow colors."""
    colors = ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta']
    colored_chars = [colored(char, random.choice(colors)) for char in text]
    return ''.join(colored_chars)

def print_banner():
    """Display a colorful banner with project information."""
    try:
        figlet = Figlet(font='slant')
        banner_text = figlet.renderText('Obinna, Hugo && Dan')
        for line in banner_text.split('\n'):
            print(print_rainbow(line))
        print(colored("Python: Automating NMAP to Detect Malware and other vulnerabilities on remote host: PROJECT 4", 'cyan'))
        print(colored("-" * 95, 'cyan'))
    except Exception as e:
        print(f"Error displaying banner: {e}")
        print("Python: Automating NMAP to Detect Malware && other vulnerabilities on remote host: PROJECT 4")
        print("-" * 95)

def get_target():
    """Get a valid target IP or hostname from user input."""
    while True:
        target = input("\nPlease enter the IP address or hostname to scan: ")
        try:
            ipaddress.ip_address(target)  # Check if input is a valid IP address
            return target
        except ValueError:
            try:
                ipaddress.ip_network(target)  # Check if input is a valid IP network range
                return target
            except ValueError:
                try:
                    ip = socket.gethostbyname(target)  # Attempt to resolve hostname to IP
                    print(f"Resolved {target} to IP: {ip}")
                    return ip
                except socket.gaierror:
                    print(f"Unable to resolve hostname: {target}")
                    print("Do NOT joke with me. Enter a valid IP address, network range, or resolvable hostname.")

def get_port_range():
    """Get port range from user input."""
    while True:
        port_range = input("Enter port range (e.g., 1-1000) or press Enter for common ports: ")
        if not port_range:
            return ""  # Scan common ports
        try:
            start, end = map(int, port_range.split('-'))
            if 1 <= start < end <= 65535:
                return port_range
            else:
                raise ValueError
        except ValueError:
            print("Invalid port range. Are you tipsy? if NO, enter two numbers between 1 and 65535, separated by a hyphen.")

def get_scan_options(is_privileged, debug_mode=False):
    """Get scan options based on user privileges."""
    print("\nSelect scanning option(s):")
    if is_privileged:
        print("1. SYN Scan (-sS)")
        print("2. UDP Scan (-sU)")
        print("3. OS detection (-O)")
    print("4. Version detection (-sV)")
    print("5. Malware and Vulnerability scanning")
    print("6. Web application scanning")
    print("7. Aggressive scan (-A)")
    
    options = input("Enter the number(s) for the scan(s) you want to carry out (e.g., 1 3): ").split()
    arguments = "-Pn"  # Always include -Pn to skip host discovery
    
    if is_privileged:
        if '1' in options: arguments += " -sS"
        if '2' in options: arguments += " -sU"
        if '3' in options: arguments += " -O"
    if '4' in options: arguments += " -sV"
    if '5' in options:
        arguments += " --script=http-malware-host,http-google-malware,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ssl-heartbleed,http-virustotal,smb-vuln-*,vuln,exploit,auth"
        print(colored("Note: Malware and Vulnerability scanning included.", 'red'))
    if '6' in options:
        arguments += " --script=http-enum,http-sql-injection,http-vuln*"
        print(colored("Note: Web application scanning included.", 'green'))
    if '7' in options: 
        arguments += " -A"
        print(colored("Note: Agressive scanning included.", 'yellow'))

    if debug_mode:
       print(f"Debug: Selected scan options: {options}")
       print(f"Debug: Resulting nmap arguments: {arguments}")
    
    return arguments.strip()

def run_nmap_scan(target, port_range, arguments, debug_mode=False):
    """Run the Nmap scan with specified parameters."""
    print(colored(f"\nInitiating Nmap scan on {target} with selected option(s): {arguments}", 'cyan'))
    nm = nmap.PortScanner()
    try:
        result = nm.scan(target, port_range, arguments=arguments)
        if debug_mode:
            print("Debug - Raw scan result:")
            print(result)
        if not result['scan']:
            print(colored("Warning: Scan completed but no results were returned. This might indicate a problem with the scan or the target.", 'yellow'))
        return nm
    except nmap.PortScannerError as e:
        print(colored(f"Error during Nmap scan: {e}", 'red'))
        if debug_mode:
            print(colored("Command that caused the error:", 'yellow'))
            print(colored(f"{nm.command_line()}", 'yellow'))
            print(colored("Nmap stderr output:", 'yellow'))
            print(colored(f"{nm._scan_result.get('nmap', {}).get('scaninfo', {}).get('error', 'No error information available')}", 'yellow'))
    except Exception as e:
        print(colored(f"Unexpected error during scan: {e}", 'red'))
        if debug_mode:
            print(colored("Full exception details:", 'yellow'))
            import traceback
            print(colored(traceback.format_exc(), 'yellow'))
    return None

def print_scan_results(nm, target, debug_mode=False):
    """Print the results of the Nmap scan."""
    if not nm or target not in nm.all_hosts():
        print(colored(f"No scan results available for {target}.", 'yellow'))
        if debug_mode:
            print("Debug - Nmap object content:")
            print(nm)
        return

    print(colored(f"\nScan results for {target}:", 'green'))
 
    for host in nm.all_hosts():
        print(colored(f"\nHost: {host}", 'cyan'))
        print(colored(f"State: {nm[host].state()}", 'cyan'))
        
        # Print information for each protocol
        for proto in nm[host].all_protocols():
            print(colored(f"\nProtocol: {proto}", 'magenta'))
            ports = nm[host][proto].keys()
            for port in ports:
                print(colored(f"Port {port}: {nm[host][proto][port]['state']}", 'yellow'))
                if 'product' in nm[host][proto][port]:
                    print(colored(f"  Service: {nm[host][proto][port]['product']}", 'yellow'))
                if 'version' in nm[host][proto][port]:
                    print(colored(f"  Version: {nm[host][proto][port]['version']}", 'yellow'))
        
        # Print OS detection results
        if 'osmatch' in nm[host]:
            for osmatch in nm[host]['osmatch']:
                print(colored(f"\nOS Match: {osmatch['name']} (Accuracy: {osmatch['accuracy']}%)", 'green'))
        
        # Print script scan results
        print(colored("\nMalware, Vulnerability and Security Scan Results:", 'red'))
        if 'hostscript' in nm[host]:
            for script in nm[host]['hostscript']:
                print(colored(f"  {script.get('id', 'Unknown Script')}:", 'red'))
                print(colored(f"    {script.get('output', 'No output')}", 'yellow'))
        
        # Check for script results in individual port scans
        for proto in nm[host].all_protocols():
            for port in nm[host][proto].keys():
                if 'script' in nm[host][proto][port]:
                    for script_name, output in nm[host][proto][port]['script'].items():
                        print(colored(f"  {script_name} (Port {port}):", 'red'))
                        print(colored(f"    {output}", 'yellow'))

        if not 'hostscript' in nm[host] and not any('script' in nm[host][proto][port] for proto in nm[host].all_protocols() for port in nm[host][proto].keys()):
            print(colored("  No vulnerability or security scan results found.", 'yellow'))

def main():
    """Main function to orchestrate the scanning process."""
    try:
        print_banner()
        if os.geteuid() != 0:
            print(colored("Warning: This script requires root privileges for full functionality. Please run with sudo.", 'yellow'))
            return

        target = get_target()
        if not target:
            print(colored("No valid target provided. Exiting.", 'red'))
            return

        port_range = get_port_range()

        debug_mode = input("Enable debug mode? (y/n): ").lower() == 'y'
        scan_arguments = get_scan_options(True, debug_mode)  # Always pass True since we're checking for root earlier


        nm = run_nmap_scan(target, port_range, scan_arguments, debug_mode)
        if nm:
            print_scan_results(nm, target, debug_mode)
        else:
            print(colored("Scan failed to return results. Please check your permissions and network connectivity.", 'red'))
    except KeyboardInterrupt:
        print(colored("\nScan interrupted by User. Exiting.", 'yellow'))
    except Exception as e:
        print(colored(f"An unexpected error occurred: {e}", 'red'))
        import traceback
        print(colored(traceback.format_exc(), 'yellow'))

if __name__ == "__main__":
    main()
